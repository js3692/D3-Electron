'use strict';

// Modules are imported here
var remote = require('remote');
var dialog = remote.require('dialog');

var Promise = require('bluebird');
var fs = require('fs');
var _ = require('lodash');

window.d3 = require('d3');
window.$ = window.jQuery = require('jquery');

// Angular App starts here
window.app = angular.module('D3Desktop', ['ui.router', 'ui.bootstrap', 'ngAnimate']);

app.config(function ($urlRouterProvider) {
	$urlRouterProvider.otherwise('/');
});
app.controller('HomeCtrl', function () {

	randomColor(d3.select("h1"), 20);
	function randomColor(_x, _x2) {
		var _again = true;

		_function: while (_again) {
			var d3Elem = _x,
			    count = _x2;
			_again = false;

			count--;
			if (!count) return;else {
				_x = d3Elem.transition().duration(1000).style("color", function () {
					return "hsl(" + Math.random() * 360 + ",100%,50%)";
				});
				_x2 = count;
				_again = true;
				continue _function;
			}
		}
	}

	var promisifiedReadTSV = Promise.promisify(d3.tsv);

	promisifiedReadTSV("data/data.tsv").then(function (data) {
		graph(data);
	});

	var graph = function graph(data) {
		var margin = { top: 20, right: 30, bottom: 30, left: 40 },
		    width = 960 - margin.left - margin.right,
		    height = 500 - margin.top - margin.bottom;

		var x = d3.scale.ordinal().rangeRoundBands([0, width], 0.1);

		var y = d3.scale.linear().range([height, 0]);

		var xAxis = d3.svg.axis().scale(x).orient("bottom");

		var yAxis = d3.svg.axis().scale(y).orient("left");

		var chart = d3.select("svg#home-example").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

		x.domain(data.map(function (d) {
			return d.letter;
		}));
		y.domain([0, d3.max(data, function (d) {
			return d.frequency;
		})]);

		chart.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);

		chart.append("g").attr("class", "y axis").call(yAxis);

		chart.selectAll(".bar").data(data).enter().append("rect").attr("class", "bar").attr("x", function (d) {
			return x(d.letter);
		}).attr("y", function (d) {
			return y(0);
		}).attr("height", function (d) {
			return height - y(0);
		}).transition().duration(300).delay(function (d, i) {
			return i * 100;
		}).attr("y", function (d) {
			return y(d.frequency);
		}).attr("height", function (d) {
			return height - y(d.frequency);
		}).attr("width", x.rangeBand());

		function type(d) {
			d.frequency = +d.frequency; // coerce to number
			return d;
		}
	};
});
'use strict';

app.config(function ($stateProvider) {
	$stateProvider.state('home', {
		url: '/',
		templateUrl: 'assets/js/home/home.html',
		controller: 'HomeCtrl'
	});
});
app.controller('BarCtrl', function ($scope, Bar) {
	randomColor(d3.select("h1"), 20);
	function randomColor(_x3, _x4) {
		var _again2 = true;

		_function2: while (_again2) {
			var d3Elem = _x3,
			    count = _x4;
			_again2 = false;

			count--;
			if (!count) return;else {
				_x3 = d3Elem.transition().duration(1000).style("color", function () {
					return "hsl(" + Math.random() * 360 + ",100%,50%)";
				});
				_x4 = count;
				_again2 = true;
				continue _function2;
			}
		}
	}
	Bar.init();
	$scope.loaded = false;
	$scope.open = function () {
		$scope.loaded = false;
		dialog.showOpenDialog({
			defaultPath: '/Users/Jungho/FullstackAcademy/Stackathon/data',
			properties: ['openFile', 'openDirectory']
		}, function (fileName) {
			if (fileName) {
				Bar.readData(fileName[0]).then(function (data) {
					$scope.loaded = true;
					$scope.fields = Object.keys(data[0]);
					$scope.$digest();
				});
			}
		});
	};
	$scope.draw = Bar.graph;
	$scope.clear = Bar.clear;
});
app.factory('Bar', function () {
	var Bar = {};
	Bar.data = [];
	var margin = { top: 20, right: 30, bottom: 30, left: 40 },
	    width = 960 - margin.left - margin.right,
	    height = 500 - margin.top - margin.bottom;

	var chart, x, y, xAxis, yAxis;

	Bar.init = function () {
		chart = d3.select("svg#bar").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

		x = d3.scale.ordinal().rangeRoundBands([0, width], 0.2, 0.3);

		y = d3.scale.linear().range([height, 0]);

		xAxis = d3.svg.axis().scale(x).orient("bottom");

		yAxis = d3.svg.axis().scale(y).orient("left");
	};

	function dataHandler(parsedData) {
		Bar.data = parsedData;
		return parsedData;
	}

	Bar.readData = function (filePath) {
		var promisifiedReadTSV = Promise.promisify(d3.tsv);
		var promisifiedReadCSV = Promise.promisify(d3.csv);

		if (/.csv/.test(filePath)) return promisifiedReadCSV(filePath).then(dataHandler);else if (/.tsv/.test(filePath)) return promisifiedReadTSV(filePath).then(dataHandler);
	};

	Bar.clear = function () {
		d3.select("svg#bar").selectAll(".bar").remove();
		d3.select("svg#bar").selectAll("g").remove();
	};

	Bar.graph = function (xVar, yVar) {
		Bar.init();

		x.domain(Bar.data.map(function (d) {
			return d[xVar];
		}));
		y.domain([0, d3.max(Bar.data, function (d) {
			return Number(d[yVar]);
		})]);

		chart.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);

		chart.append("g").attr("class", "y axis").call(yAxis);

		chart.selectAll(".bar").data(Bar.data).enter().append("rect").attr("class", "bar").attr("x", function (d) {
			return x(d[xVar]);
		}).attr("y", function (d) {
			return y(0);
		}).attr("height", function (d) {
			return height - y(0);
		}).transition().duration(300).delay(function (d, i) {
			return i * 100;
		}).attr("y", function (d) {
			return y(Number(d[yVar]));
		}).attr("height", function (d) {
			return height - y(Number(d[yVar]));
		}).attr("width", x.rangeBand());
	};

	return Bar;
});
app.config(function ($stateProvider) {
	$stateProvider.state('bar', {
		url: '/bar',
		templateUrl: 'assets/js/bar/bar.html',
		controller: 'BarCtrl'
	});
});
app.controller('PieCtrl', function ($scope, Pie) {
	randomColor(d3.select("h1"), 20);
	function randomColor(_x5, _x6) {
		var _again3 = true;

		_function3: while (_again3) {
			var d3Elem = _x5,
			    count = _x6;
			_again3 = false;

			count--;
			if (!count) return;else {
				_x5 = d3Elem.transition().duration(1000).style("color", function () {
					return "hsl(" + Math.random() * 360 + ",100%,50%)";
				});
				_x6 = count;
				_again3 = true;
				continue _function3;
			}
		}
	}
	Pie.init();
	$scope.loaded = false;
	$scope.open = function () {
		$scope.loaded = false;
		dialog.showOpenDialog({
			defaultPath: '/Users/Jungho/FullstackAcademy/Stackathon/data',
			properties: ['openFile', 'openDirectory']
		}, function (fileName) {
			if (fileName) {
				Pie.readData(fileName[0]).then(function (data) {
					$scope.loaded = true;
					$scope.fields = Object.keys(data[0]);
					$scope.$digest();
				});
			}
		});
	};
	$scope.draw = Pie.graph;
	$scope.clear = Pie.clear;
});
app.factory('Pie', function () {
	var Pie = {};
	Pie.data = [];
	var width = 960,
	    height = 500,
	    radius = Math.min(width, height) / 2;

	var chart, arc, type;

	Pie.init = function () {
		chart = d3.select("svg#pie").attr("width", width).attr("height", height).append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

		arc = d3.svg.arc().outerRadius(radius - 10).innerRadius(0);

		type = d3.scale.category10();
	};

	function dataHandler(parsedData) {
		Pie.data = parsedData;
		return parsedData;
	}

	Pie.readData = function (filePath) {
		var promisifiedReadTSV = Promise.promisify(d3.tsv);
		var promisifiedReadCSV = Promise.promisify(d3.csv);

		if (/.csv/.test(filePath)) return promisifiedReadCSV(filePath).then(dataHandler);else if (/.tsv/.test(filePath)) return promisifiedReadTSV(filePath).then(dataHandler);
	};

	Pie.clear = function () {
		d3.select("svg#pie").selectAll("g").remove();
	};

	Pie.graph = function (dataSet) {
		Pie.init();

		var pie = d3.layout.pie().sort(null).value(function (d) {
			return d[dataSet];
		});

		var g = chart.selectAll(".arc").data(pie(Pie.data)).enter().append("g").attr("class", "arc");

		g.append("path").attr("d", arc).style("fill", function (d) {
			return "#fff";
		}).transition().duration(500).style("fill", function (d) {
			return type(d.data[dataSet]);
		});

		g.append("text").attr("transform", function (d) {
			return "translate(" + arc.centroid(d) + ")";
		}).attr("dy", ".35em").style("text-anchor", "middle").text(function (d) {
			return d.data[dataSet];
		});
	};

	return Pie;
});
app.config(function ($stateProvider) {
	$stateProvider.state('pie', {
		url: '/pie',
		templateUrl: 'assets/js/pie/pie.html',
		controller: 'PieCtrl'
	});
});
app.controller('ExternalCtrl', function ($scope) {
	var webview = document.getElementById('discover');

	webview.addEventListener("did-start-loading", function (e) {

		$scope.back = function () {
			webview.goBack();
		};
		$scope.forward = function () {
			webview.goForward();
		};
		$scope.reload = function () {
			webview.reload();
		};
	});
});
app.config(function ($stateProvider) {
	$stateProvider.state('discover', {
		url: '/discover',
		templateUrl: 'assets/js/discover/discover.html',
		controller: 'ExternalCtrl'
	});
});
app.controller('ScatteredCtrl', function ($scope, Scattered) {
	randomColor(d3.select("h1"), 20);
	function randomColor(_x7, _x8) {
		var _again4 = true;

		_function4: while (_again4) {
			var d3Elem = _x7,
			    count = _x8;
			_again4 = false;

			count--;
			if (!count) return;else {
				_x7 = d3Elem.transition().duration(1000).style("color", function () {
					return "hsl(" + Math.random() * 360 + ",100%,50%)";
				});
				_x8 = count;
				_again4 = true;
				continue _function4;
			}
		}
	}
	Scattered.init();
	$scope.loaded = false;
	$scope.open = function () {
		$scope.loaded = false;
		dialog.showOpenDialog({
			defaultPath: '/Users/Jungho/FullstackAcademy/Stackathon/data',
			properties: ['openFile', 'openDirectory']
		}, function (fileName) {
			if (fileName) {
				Scattered.readData(fileName[0]).then(function (data) {
					$scope.loaded = true;
					$scope.fields = Object.keys(data[0]);
					$scope.$digest();
				});
			}
		});
	};
	$scope.draw = Scattered.graph;
	$scope.clear = Scattered.clear;
});
app.factory('Scattered', function () {
	var Scattered = {};
	Scattered.data = [];
	var margin = { top: 20, right: 30, bottom: 30, left: 40 },
	    width = 960 - margin.left - margin.right,
	    height = 500 - margin.top - margin.bottom;

	var chart, x, y, xAxis, yAxis, type, detail;

	Scattered.init = function () {
		chart = d3.select("svg#scattered").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

		x = d3.scale.linear().range([0, width]);

		y = d3.scale.linear().range([height, 0]);

		xAxis = d3.svg.axis().scale(x).orient("bottom");

		yAxis = d3.svg.axis().scale(y).orient("left");

		type = d3.scale.category10();

		detail = d3.select("#scattered-chart-container").append("div").attr("class", "legend").style("opacity", 0);
	};

	function dataHandler(parsedData) {
		Scattered.data = parsedData;
		return parsedData;
	}

	Scattered.readData = function (filePath) {
		var promisifiedReadTSV = Promise.promisify(d3.tsv);
		var promisifiedReadCSV = Promise.promisify(d3.csv);

		if (/.csv/.test(filePath)) return promisifiedReadCSV(filePath).then(dataHandler);else if (/.tsv/.test(filePath)) return promisifiedReadTSV(filePath).then(dataHandler);
	};

	Scattered.clear = function () {
		d3.select("svg#scattered").selectAll(".dot").remove();
		d3.select("svg#scattered").selectAll("g").remove();
	};

	Scattered.graph = function (xVar, yVar, filter) {
		Scattered.init();

		x.domain([d3.min(Scattered.data, function (d) {
			return Number(d[xVar]);
		}) - 1, d3.max(Scattered.data, function (d) {
			return Number(d[xVar]);
		}) + 1]);
		y.domain([d3.min(Scattered.data, function (d) {
			return Number(d[yVar]);
		}) - 1, d3.max(Scattered.data, function (d) {
			return Number(d[yVar]);
		}) + 1]);

		chart.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis).append("text").attr("class", "label").attr("x", width).attr("y", -6).style("text-anchor", "end").text(xVar);

		chart.append("g").attr("class", "y axis").call(yAxis).append("text").attr("class", "label").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end").text(yVar);

		chart.selectAll(".dot").data(Scattered.data).enter().append("circle").attr("class", "dot").attr("r", 3.5).attr("cx", function (d) {
			return x(Number(d[xVar]));
		}).attr("cy", function (d) {
			return y(Number(d[yVar]));
		}).style("fill", function (d) {
			return type(d[filter]);
		}).style("opacity", 0).transition().duration(500).style("opacity", 1).on("mouseover", function (d) {
			detail.transition().duration(200).style("opacity", 0.9);
			detail.html(d[filter] + " (" + d[xVar] + ", " + d[yVar] + ")").style("left", d3.event.pageX + 5 + "px").style("top", d3.event.pageY - 28 + "px");
		}).on("mouseout", function (d) {
			detail.transition().duration(500).style("opacity", 0);
		});

		// var legend = chart.selectAll(".legend")
		// 	.data(type.domain())
		// 	.enter().append("g")
		// 	.attr("class", "legend")
		// 	.attr("transform", function (d, i) { return "translate(0," + i * 20 + ")"; });

		// legend.append("rect")
		// 	.attr("x", width - 18)
		// 	.attr("width", 18)
		// 	.attr("height", 18)
		// 	.style("fill", type);

		// legend.append("text")
		// 	.attr("x", width - 24)
		// 	.attr("y", 9)
		// 	.attr("dy", ".35em")
		// 	.style("text-anchor", "end")
		// 	.text(function (d) { return d; });
	};

	return Scattered;
});
app.config(function ($stateProvider) {
	$stateProvider.state('scattered', {
		url: '/scattered',
		templateUrl: 'assets/js/scattered/scattered.html',
		controller: 'ScatteredCtrl'
	});
});
app.directive('sidebar', function ($state) {

	return {
		restrict: 'E',
		scope: {},
		templateUrl: 'assets/js/sidebar/sidebar.html',
		link: function link(scope) {
			scope.items = [{ label: 'Home', state: 'home' }, { label: 'Discover', state: 'discover' }, { label: 'Bar', state: 'bar' }, { label: 'Pie', state: 'pie' }, { label: 'Scattered Plot', state: 'scattered' }];

			scope.navigate = $state.go;
		}

	};
});
//# sourceMappingURL=data:application/json;base64,
